buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        maven {url='https://repo.spongepowered.org/maven'}
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.1.0'
        classpath 'com.wynprice.cursemaven:CurseMaven:2.1.3'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'com.github.gmazzo.buildconfig' version '3.0.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'eclipse'
apply from: 'https://raw.githubusercontent.com/LordGrimmauld/gitinfo-collect/master/build.gradle'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

version = "${minecraft_version}-${mod_version}"
if (System.getenv("DEV") == "true") {
    version = "${minecraft_version}-${mod_version}-dev-${getGitHash()}"
}
if (System.getenv("CI") == "true") {
    version = "${minecraft_version}-nightly-${getGitHash()}"
}
group = 'com.beesplease.sugarandspice' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "SugarAndSpice"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "parchment", version: "${parchment_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan" //, "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan" //, "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args "--mod", modid, "--all", "--output", file('src/generated/resources/'), "--existing", file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        url "https://maven.tterrag.com/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // JEI
        name 'Progwml6 maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        // curios
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "JourneyMap (Public)"
        url = "https://jm.gserv.me/repository/maven-public/"
    }
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'junit:junit:4.13.1'
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:all") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    // mixin
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    testImplementation 'org.apache.logging.log4j:log4j-api:2.17.0'
    testRuntimeOnly 'org.apache.logging.log4j:log4j-core:2.17.0'

    // maths libraries
    configurations.implementation.extendsFrom(configurations.extraLibs)
}

compileJava.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes([
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": "BeesPlease",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" :"BeesPlease",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")//,
                //"MixinConfigs": "mixins.${modid}.json"
        ])
    }
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    testLogging.showStandardStreams = true
    useJUnitPlatform()
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

//mixin {
//    add sourceSets.main, "mixins.${modid}.refmap.json"
//    config "mixins.${modid}.json"
//
//    debug.verbose = true
//    debug.export = true
//    dumpTargetOnFailure = true
//}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

artifacts {
    archives deobfJar
}

build.dependsOn deobfJar

jar.finalizedBy('reobfJar')

buildConfig {
    buildConfigField 'String', 'MODID', "\"${modid}\""
    buildConfigField 'String', 'VERSION', "\"${project.version}\""
    buildConfigField "String", "GITHASH", "\"${getGitInfo()}\""
    buildConfigField 'String', 'DISPLAY_NAME', "\"${display_name}\""

    version = project.version
    packageName = project.group
}

task resolveAllDependencies {
    description "Resolves all transitive dependencies (e.g. to build offline later)."

    doLast {
        configurations.all {
            if (it.canBeResolved) {
                it.resolve()
            }
        }
    }
}
